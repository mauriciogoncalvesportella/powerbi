import {Inject, Injectable} from "@nestjs/common";
import {ILinearityGenerator, PerCustomerLinearityDTO, ResumeLinearityDTO, ResumePotentitalLinearityDTO} from "./linearity.controller";
import {LinearityQueries} from './linearity.queries'
const _ = require('lodash')

export interface QueryResultResumeLinearity {
  count: number,
  total_customers: number
}

export interface QueryResultPotentialLinearity {
  count: number,
  amount: number,
  average: number,
  foreseen: number
}

export interface QueryResultPerCustomerLinearity extends PerCustomerLinearityDTO {}

export interface ILinearityQueries {
  resume (cd: number, type: 'seller' | 'team', yearMonthInterval: string[]): Promise<QueryResultResumeLinearity[]>
  resumePotential (cd: number, type: 'seller' | 'team', yearMonthInterval: string[]): Promise<QueryResultPotentialLinearity[]>
  perCustomer (cd: number, type: 'seller' | 'team', yearMonthInterval: string[], countFilter: number, sortColumn: string, sortType: string, offset: number, limit: number): Promise<QueryResultPerCustomerLinearity[]> 
}

@Injectable()
export class LinearityGenerator implements ILinearityGenerator {
  constructor (
    @Inject(LinearityQueries)
    private queries: ILinearityQueries,
  ) {}

  linearityLabel = {
    5: 'Excelente',
    4: 'Bom',
    3: 'Regular',
    2: 'Ruim',
    1: 'Péssimo',
    0: 'Novos'
  }

  async resume (cd: number, type: 'seller' | 'team', yearMonthInterval: string[]): Promise<ResumeLinearityDTO> {
    const queryResult = await this.queries.resume(cd, type, yearMonthInterval)
    return {
      values: _.map(queryResult, 'total_customers'),
      count: _.map(queryResult, 'count'),
      labels: queryResult.map(qr => this.linearityLabel[qr.count] ?? 'Péssimo')
    }
  }

  async resumePotentital (cd: number, type: 'seller' | 'team', yearMonthInterval: string[]): Promise<ResumePotentitalLinearityDTO> {
    const queryResult = await this.queries.resumePotential(cd, type, yearMonthInterval)
    return {
      labels: queryResult.map(qr => this.linearityLabel[qr.count] ?? 'Péssimo'),
      goal_values: _.map(queryResult, 'foreseen'),
      count: _.map(queryResult, 'count'),
      values: _.map(queryResult, 'amount')
    }
  }

  async perCustomer (cd: number, type: 'seller' | 'team', yearMonthInterval: string[], countFilter: number, sortColumn: string, sortType: string, offset: number, limit: number): Promise<PerCustomerLinearityDTO[]> {
    return await this.queries.perCustomer(cd, type, yearMonthInterval, countFilter, sortColumn, sortType, offset, limit)
  }
}
